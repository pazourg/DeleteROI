''' ===============================================================================
 * DeleteRoi, a plugin for imagej/Fiji
 * 
 * Copyright (C) 2025 Gregory Pazour
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation (http://www.gnu.org/licenses/gpl.txt )
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/gpl-3.0.html>.
 *    
 * For any questions please feel free to contact (Gregory.Pazour@umassmed.edu)
 * ===============================================================================
'''

from ij import IJ

# Our package imports
from DeleteROIPkg.Utilities import trace

# Default text font information
DEFAULT_FONT='font-family:"{}"; font-size:"{}"'.format("Calibri", "14pt")

# Help Information - HTML as string - mind the wind or help window height will be incorrect
HELP_SFD = '''
<p>
<b>Source Folder:</b> Navigate to a folder that contains the files to be processed. 
DeleteROI uses two files. The first is a tif image that ends with CQ_RP.tif 
containing the ciliary masks and the immunofluorescence channels. The second is 
a comma delineated spreadsheet generated by CiliaQ that ends with CQ.txt.
<p>
<b>Adjust Type:</b> This menu option controls how the upcoming grid of ROIs is displayed.
<ol>
   <li>"Saturation" - the percentage of the pixels that are saturated 
   with higher numbers producing more saturated images  (the mask channel is 
   typically a binary image so saturation will only determine if the channel is 
   shown or not).</li>
   <li>"Min/Max" - sets minimal and maximal display values for each of the 
   three channels (the mask channel is typically a binary image so setting the 
   Min below the mask value will show this channel).</li>
   <li>"Manual" - allows you to view the tif image and adjust on an 
   image-by-image basis.</li>
</ol>
<p> 
Once you have navigated to the folder of files to be processed, select <b>Update</b>. 
<p>
This popup will be updated with a list of files to be processed.  If this is 
correct, select <b>Next</b> to continue.
<p><p>
Copyright (C) 2025 Gregory Pazour<br> 
'''

HELP_AOPTIONS = '''
The <b>Advanced Options</b> allow you to set options that are not normally modified
but can help in the processing of the ROI.  The options are:<br>
<ol>
  <li><b>Scale:</b> sets the size of the ROI displayed on your screen. Larger 
  numbers will increase the size displayed on the screen making it easier to see
  but will also reduce the number of ROIs in a single montage screen resulting in
  more screens to process the session.</li>
  <li><b>ROI Size:</b> sets the amount of the image that is displayed for an 
  ROI in pixels. 64 pixels works well for 60X magnification, 1024-by-1024 images 
  of fibroblast cilia. Longer cilia or higher magnification images would require 
  a larger value.</li>
  <li><b>Debug:</b> leaves all images in the session open adding the image name to
  each ROI in the montage.  This allows you to understand exactly which image the ROI 
  in a montage is pulled from.  However the montage data is no longer blind.</li>
  <li><b>Column #:</b> sets the column number in the CQ-stripped.txt file where 
  the name of the image file will be added added. This is typically column #1.
  If there is an existing value in the specified column it will be overwritten. 
  If left empty, no image file name is added.</li>
</ol>
<p>
<b>Continue</b> will start the process of displaying ROIs for you to assess.  
<p>
Note that it may take some time to open each image and generate the appropriate montage.  
The speed of the storage (spinning, ssd, network, etc) that the tif images are stored 
on will directly impact how long it takes to generate the montage.  Local SSD storage is
ideal for reducing the overall time.
'''

HELP_MMOPTIONS = '''
Set the Min and Max values for each channel depending on the bit depth of the 
channel and the exposure levels.
<p>
The mask channel is typically binary and so setting the Min below the mask 
value will show the channel.
'''

HELP_PROCRSLT = '''
Depending on the number of ROIs in the dataset, the workflow will be broken into 
sessions of about 500 ROIs. Once processing of a session is completed, the data 
is written to the disk.  If there are interruptions during analysis, the process 
can restart at the first unfinished session without needing to redo all sessions.
<p>
For each session, the current status (Pending or Complete) will be displayed.  This
allows you to see which sessions have already been completed and which still 
require processing.
<p>
Select <b>Advanced Options</b> to set display size parameters of the ROIs, to go 
into Debug mode, or to have the image file name to be added to the output TXT file 
(in CSV format).
 
<b>Continue</b> will start the process of displaying the ROI montages.
'''

# Helper class to display help when selected
class HelpManager:
    #
    # Defined Keys
    #
    KEY_SFD       = "SelectFilesDialog"
    KEY_AOPTIONS  = "AdvancedOptions"
    KEY_MMOPTIONS = "MinMaxOptions"
    KEY_PROCRSLT  = "ProcessResults"
    
    def __init__(self):
        #
        self.help = {}
        self.help[HelpManager.KEY_SFD]       = HELP_SFD
        self.help[HelpManager.KEY_AOPTIONS]  = HELP_AOPTIONS
        self.help[HelpManager.KEY_MMOPTIONS] = HELP_MMOPTIONS
        self.help[HelpManager.KEY_PROCRSLT]  = HELP_PROCRSLT
        
    # Return the requested Help as a string
    def getHelp(self, key):
        #
        self.result     = ""
        self.def_format = '<html><div style=\'{}; height:{}px\'>{}</div></html>'
        
        if key in self.help:
            self.result = self.help[key]
        else:
            self.result = "No Help information available"

        # Calculate the number of lines we will need to display
        num_lines = len(self.result.splitlines())
        num_para  = self.result.count("<p>")
        height    = (num_lines + num_para) * 10
        
        return self.def_format.format(DEFAULT_FONT, height, self.result)

HELP = HelpManager()